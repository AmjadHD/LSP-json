%YAML 1.2
---
name: JSONC
file_extensions:
  - jsonc
  - sublime-settings
  - sublime-menu
  - sublime-keymap
  - sublime-mousemap
  - sublime-theme
  - sublime-build
  - sublime-project
  - sublime-completions
  - sublime-commands
  - sublime-macro
  - sublime-color-scheme
  - ipynb
  - Pipfile.lock
scope: source.jsonc
contexts:
  prototype:
    - include: comments
  main:
    - include: value
  value:
    - include: constant
    - include: number
    - include: string
    - include: array
    - include: object
  array:
    - match: '\['
      scope: punctuation.section.sequence.begin.jsonc
      push:
        - meta_scope: meta.sequence.jsonc
        - match: '\]'
          scope: punctuation.section.sequence.end.jsonc
          pop: true
        - include: value
        - match: ","
          scope: punctuation.separator.sequence.jsonc
        - match: '[^\s\]]'
          scope: invalid.illegal.expected-sequence-separator.jsonc
  comments:
    - match: /\*\*(?!/)
      scope: punctuation.definition.comment.jsonc
      push:
        - meta_scope: comment.block.documentation.jsonc
        - meta_include_prototype: false
        - match: \*/
          pop: true
        - match: ^\s*(\*)(?!/)
          captures:
            1: punctuation.definition.comment.jsonc
    - match: /\*
      scope: punctuation.definition.comment.jsonc
      push:
        - meta_scope: comment.block.jsonc
        - meta_include_prototype: false
        - match: \*/
          pop: true
    - match: (//).*$\n?
      scope: comment.line.double-slash.js
      captures:
        1: punctuation.definition.comment.jsonc
  constant:
    - match: \b(?:true|false|null)\b
      scope: constant.language.jsonc
  number:
    # handles integer and decimal numbers
    - match: -?(?:0|[1-9]\d*)(?:(?:(\.)\d+)(?:[eE][-+]?\d+)?|(?:[eE][-+]?\d+))
      scope: constant.numeric.float.decimal.jsonc
      captures:
        1: punctuation.separator.decimal.jsonc
    - match: -?(?:0|[1-9]\d*)
      scope: constant.numeric.integer.decimal.jsonc
  object:
    # a jsonc object
    - match: '\{'
      scope: punctuation.section.mapping.begin.jsonc
      push:
        - meta_scope: meta.mapping.jsonc
        - match: '\}'
          scope: punctuation.section.mapping.end.jsonc
          pop: true
        - match: '"'
          scope: punctuation.definition.string.begin.jsonc
          push:
            - clear_scopes: 1
            - meta_scope: meta.mapping.key.jsonc string.quoted.double.jsonc
            - meta_include_prototype: false
            - include: inside-string
        - match: ":"
          scope: punctuation.separator.mapping.key-value.jsonc
          push:
            - match: ',|\s?(?=\})'
              scope: invalid.illegal.expected-mapping-value.jsonc
              pop: true
            - match: (?=\S)
              set:
                - clear_scopes: 1
                - meta_scope: meta.mapping.value.jsonc
                - include: value
                - match: ''
                  set:
                    - match: ','
                      scope: punctuation.separator.mapping.pair.jsonc
                      pop: true
                    - match: \s*(?=\})
                      pop: true
                    - match: \s(?!/[/*])(?=[^\s,])|[^\s,]
                      scope: invalid.illegal.expected-mapping-separator.jsonc
                      pop: true
        - match: '[^\s\}]'
          scope: invalid.illegal.expected-mapping-key.jsonc
  string:
    - match: '"'
      scope: punctuation.definition.string.begin.jsonc
      push: inside-string
  inside-string:
    - meta_scope: string.quoted.double.jsonc
    - meta_include_prototype: false
    - match: '"'
      scope: punctuation.definition.string.end.jsonc
      pop: true
    - include: string-escape
    - match: $\n?
      scope: invalid.illegal.unclosed-string.jsonc
      pop: true
  string-escape:
    - match: |-
        (?x:                # turn on extended mode
          \\                # a literal backslash
          (?:               # ...followed by...
            ["\\/bfnrt]     # one of these characters
            |               # ...or...
            u               # a u
            [0-9a-fA-F]{4}  # and four hex digits
          )
        )
      scope: constant.character.escape.jsonc
    - match: \\.
      scope: invalid.illegal.unrecognized-string-escape.jsonc
